plugins {
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.23.6'
    id 'antlr'
    id 'idea'
    id 'java-library'
}

javafx {
    version = "16"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.base']
}

mainClassName = "cc.cc1234.PrettyZooApplication"

def runArgsValue = [
        "-Djdk.gtk.version=2",
        "-Dfile.encoding=utf-8",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.event=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.scene=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.geom=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.scene.text=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.inputmap=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.util=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.util=com.jfoenix",
        "--add-opens=java.base/java.lang.reflect=com.jfoenix"
]

run {
    jvmArgs = runArgsValue
    // required due to a bug in Java: https://github.com/javafxports/openjdk-jfx/issues/175
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    addExtraDependencies("javafx")
    forceMerge("jackson", "log4j-api")
    launcher {
        name = 'prettyZoo'
        jvmArgs = runArgsValue
    }
    jpackage {
        def os = org.gradle.internal.os.OperatingSystem.current()
        installerOptions = [
                '--resource-dir', 'src/main/resources',
                '--name', 'PrettyZoo',
                '--app-version', "${project.version}",
                '--description', 'Pretty nice Zookeeper GUI',
                '--copyright', 'Apache License',
                '--vendor', 'vran'
        ]
        if (os.windows) {
            installerType = 'msi'
            icon = 'src/main/resources/assets/icon/icon.ico'
            installerOptions += [
                    '--win-per-user-install', '--win-dir-chooser',
                    '--win-shortcut'
            ]
        }

        if (os.macOsX) {
            installerType = 'dmg'
            icon = 'src/main/resources/assets/icon/Icon.icns'
        }

        if (os.linux) {
            icon = 'src/main/resources/assets/icon/icon.png'
            installerOptions += [
                    '--linux-deb-maintainer', 'vran_dev@foxmail.com',
                    '--linux-rpm-license-type', 'GPLv3',
                    '--linux-shortcut'
            ]
        }
    }
}

jpackage {
    doLast {
        file("${buildDir}/jpackage/prettyZoo-${version}.dmg").renameTo("${buildDir}/jpackage/prettyZoo-mac.dmg")
        file("${buildDir}/jpackage/prettyZoo-${version}.msi").renameTo("${buildDir}/jpackage/prettyZoo-win.msi")
        file("${buildDir}/jpackage/prettyZoo-${version}.rpm").renameTo("${buildDir}/jpackage/prettyZoo-linux.rpm")
        file("${buildDir}/jpackage/prettyZoo-${version}.deb").renameTo("${buildDir}/jpackage/prettyZoo-linux.deb")
    }
}

dependencies {
    api project(':core')
    api project(':specification')
    antlr "org.antlr:antlr4:4.9" // use ANTLR version 4

    implementation 'com.google.guava:guava'
    implementation 'org.fxmisc.richtext:richtextfx'
    implementation 'org.antlr:antlr4-runtime'
    implementation 'com.jfoenix:jfoenix'
    implementation 'commons-io:commons-io'
}

configJavafxRun {
    dependsOn classes
}

task updateVersion {
    def versionFileDir = projectDir.getAbsolutePath() + '/src/main/java/cc/cc1234/version/Version.java'
    def oldVersionStr = findOldVersionStr(versionFileDir)
    def newVersionValue = version.toString().split("-")[0]
    def newVersionStr = "    public static final String VERSION = \"" + newVersionValue + "\";"
    //旧版本和新版本不一样, 进行替换
    if (oldVersionStr.toString().trim() != newVersionStr.trim()) {
        def updatedContent = new File(versionFileDir).getText('UTF-8').replaceAll(oldVersionStr, newVersionStr)
        new File(versionFileDir).write(updatedContent, 'UTF-8')
    }
}

def findOldVersionStr(path) {
    def readerString = ""
    new File(path).withReader('UTF-8') { reader ->
        reader.eachLine {
            //读取一行，如果发现有"VERSION"字符，说明是我们要修改的那一行。
            if (it.contains("VERSION")) {
                //保存it到string，然后返回
                readerString <<= it
                return readerString
            }
        }
        return readerString
    }
}

compileJava {
    dependsOn updateVersion
}

sourceSets {
    main {
        java.srcDirs += 'gen/main/java'
        resources.srcDirs += 'gen/main/resources'
    }
}

//generateGrammarSource {
//    source("src/main/resources/grammars/properties.g4")
//    outputDirectory = file("gen/main/java/cc/cc1234/antlr4/properties")
//    arguments += ["-visitor",
//                  "-long-messages"]
//}